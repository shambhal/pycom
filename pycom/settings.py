"""
Django settings for pycom project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/
appoint@2024 for email 
For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import environ
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))
#gci id
GCI=env('GCI')


CURRENCY_SETTINGS={'locale':'en_IN','currency_code':'INR','locjs':'en-IN'}
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
MEDIA_ICACHE = os.path.join(BASE_DIR, 'static/cache/')
MEDIA_STATIC=os.path.join(BASE_DIR, 'static/')
ICACHE_URL=MEDIA_IURL='/static/cache/'
X_FRAME_OPTIONS = 'SAMEORIGIN'
CART_SESSION_ID='cartbook'
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '&#c#(2s*u01c9#4olfxii3l1wrlz8mqv5b5xs%3cmf+6%d303('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')
EMAIL_ADMIN='info@appoint.shambhalnetworks.in'
#ALLOWED_HOSTS = ['192.168.1.2','localhost','127.0.0.1','192.168.1.3']
ALLOWED_HOSTS = env('DJANGO_ALLOWED_HOSTS').split(',')
USE_I18N = True
USE_L10N = True

# Application definition

INSTALLED_APPS = [
    #'jazzmin',
     "django.forms",
   #'django.contrib.admin',
    "pycom.apps.MyAdminConfig", 
    'django.contrib.auth',
    "django_mysql",
   
    #'django_summernote',
     #"product.apps.ProductConfig",
     'catalog',
     # 'whrs.apps.WhrsConfig',
   'tsettings.apps.TsettingsConfig',
     'rest_framework',
      'rest_framework_simplejwt',
     'fm',
    # "fcm_django",
     'config',
     'taxes',
     'checkout',
     'information',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "seo",
    'ckeditor',
    'contact',
    "guser",
    'customer',
    'orders',
    'payment.apps.PaymentConfig',
    #'payment.gateways.cod.apps.CodConfig',
   'cart.apps.CartConfig',
    'service',
    'appmodules',
    'headless',
  
     'api'
]

FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    #'pycom.appmodules.middleware.middlecust.CustMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    #'django.contrib.auth.hashers',
    'middleware.middlecust.CustMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
'''
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'accounts.hashers.PBKDF2WrappedSHA1PasswordHasher',
]
'''
ROOT_URLCONF = 'pycom.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
       'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pycom.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
SITE_URL=env('SITE_URL')
db_conn=env('DB_CONNECTION')
DATABASES = {
 

 'default': {
       #'ENGINE': if db_conn then 'django.db.backends.postgresql',
       #'NAME': 'postgres',
       'ENGINE':  db_conn ,
       'NAME':env('DB_DATABASE'),
       'USER': env('DB_USERNAME'),
     'PASSWORD': env('DB_PASSWORD'),
       'HOST': env('DB_HOST'),
        'PORT': env('DB_PORT'),
    },
   # 'default': {
      #  'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': os.path.join('BASE_DIR' , 'db.sqlite3'),
   # }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
REST_FRAMEWORK = { 
    'DEFAULT_AUTHENTICATION_CLASSES': [ 
        'rest_framework_simplejwt.authentication.JWTAuthentication', 
    ], 
    'UNICODE_JSON':True
} 
from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=92),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=3),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,

}
# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
MINUTE_GAP=330
#ALLOW ADVANCE DATES IN DAYS
AADS=10
LOCALE_PATHS = [
    os.path.join(BASE_DIR,'locale/'),
    
]
#customised

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
  
]
LOGGING = {
    'version': 1,
    # The version number of our log
    'disable_existing_loggers': False,
    # django uses some of its own loggers for internal operations. In case you want to disable them just replace the False above with true.
    # A handler for WARNING. It is basically writing the WARNING messages into a file called WARNING.log
    'handlers': {
        'file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR + '/error.log',
        },
        
    },
    # A logger for WARNING which has a handler called 'file'. A logger can have multiple handler
    'loggers': {
       # notice the blank '', Usually you would put built in loggers like django or root here based on your needs
        '': {
            'handlers': ['file'], #notice how file variable is called in handler which has been defined above
            'level': 'WARNING',
            'propagate': True,
        },
    },
}
